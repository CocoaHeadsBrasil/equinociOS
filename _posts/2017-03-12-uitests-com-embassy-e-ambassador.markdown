---
layout:     post
title:      "UITests com Embassy e Ambassador"
subtitle:   "Mockando a sua API no target de testes"
date:       2017-03-12 00:00:00
author:     "Emannuel Carvalho"
header-img: "img/emannuelOC/header.jpg"
category:   Testes
---

# UITest com Embassy & Ambassador

## Objetivo

Esse post tem objetivos bem modestos. A ideia √© simplesmente falar sobre um desafio que eu enfrentei em um projeto recente (testar a UI de maneira isolada e independente) e apresentar as ferramentas que eu encontrei e que foram muito √∫teis ([Embassy](https://github.com/envoy/Embassy){:target="_blank"} e [Ambassador](https://github.com/envoy/Ambassador){:target="_blank"}).

Foi uma experi√™ncia legal e at√© meio surpreendente de certa forma. Espero que isso possa ser √∫til pra outras pessoas tamb√©m üòä

## n√£o-sei-que-t√≠tulo-colocar-aqui

Algo que sempre me chamou a aten√ß√£o √© a intera√ß√£o entre pessoas de diferentes √°reas e com diferentes backgrounds. Eu costumo me agradar muito com as iniciativas que t√™m como objetivo tornar essa intera√ß√£o mais agrad√°vel e produtiva. Foi esse pensamento que me motivou a procurar implementar testes de UI no projeto que eu estava trabalhando nos √∫ltimos meses. 

Diferente dos testes unit√°rios, os testes de UI tem essa caracter√≠stica de observar o funcionamento do app "pelo lado de fora" e isso pode ser uma porta de entrada para "n√£o-programadores" se envolverem mais com o processo de desenvolvimento, uma vez que n√£o √© necess√°rio conhecer a implementa√ß√£o do app pra testar. Al√©m disso, o c√≥digo em um teste de UI costuma ser bem mais leg√≠vel (menos assustador? ü§î) pra quem n√£o est√° acostumado a codar. 

Pois bem. Nesse projeto eu resolvi escrever os meus primeiros UITests. E eu precisei pesquisar como eu faria pra que os meus testes n√£o tocassem no servidor. Naquele momento n√≥s s√≥ t√≠nhamos o servidor de homologa√ß√£o ent√£o de cara havia duas op√ß√µes: (1) criar um servidor para os testes e passar uma url diferente como vari√°vel de ambiente no launch dos testes; ou (2) mockar as respostas do servidor na pr√≥pria camada de network e retornar essas respostas quando estiver rodando testes de UI.

A primeira op√ß√£o n√£o me pareceu uma boa ideia. Os testes dependeriam da conex√£o e do servidor, de modo que qualquer falha em um desses dois acarretaria em uma altera√ß√£o do resultado dos testes.  
A segunda op√ß√£o n√£o me parecia t√£o problem√°tica, mas ainda n√£o era o ideal. O que me fez pensar duas vezes foi o fato de que haveria bastante c√≥digo no app que n√£o servia pro app em si, mas sim pros meus testes. 

Eu fui procurar uma terceira op√ß√£o e acabei encontrando [este artigo](https://envoy.engineering/embedded-web-server-for-ios-ui-testing-8ff3cef513df#.t2rr3w9db){:target="_blank"}. Com o Embassy e o Ambassador, a ideia √© que o seu servidor rode no pr√≥prio target de testes e voc√™ pode definir a resposta que voc√™ quer retornar no pr√≥prio m√©todo onde a UI ser√° testada. Al√©m disso, √© poss√≠vel verificar se os dados que o app est√° enviando para o servidor a partir de a√ß√µes na interface est√£o corretos.

Eu gostei muito da ideia. Os testes v√£o ficar isolados e a defini√ß√£o do que o app est√° recebendo fica logo acima dos asserts que verificam se a interface est√° como deveria, tornando bem mais vis√≠vel (mesmo pra quem n√£o est√° acostumado com o c√≥digo) a rela√ß√£o entre o que o app est√° esperando de retorno da API e a interface.

## Configurando o projeto

Para que o nosso app tenha acesso ao servidor local, √© preciso fazer algumas configura√ß√µes. Em primeiro lugar, voc√™ deve incluir o `Embassy` e o `Ambassador` no projeto. Eu fiz isso usando cocoapods:

```
target 'JustDevsUITests' do
    inherit! :search_paths

    pod 'Embassy', '~> 3.0'
    pod 'EnvoyAmbassador', '~> 3.0'
end
```

Para as configura√ß√µes do servidor, eu criei uma _UITestBase_ com as configura√ß√µes necess√°rias: 

```swift
import XCTest

import Embassy
import EnvoyAmbassador

class UITestBase: XCTestCase {
    
    let port = 8088
    var router: Router!
    var eventLoop: SelectorEventLoop!
    var server: HTTPServer!
    var app: XCUIApplication!
    
    var eventCondition: NSCondition!
    var eventLoopThread: Thread!
        
    override func setUp() {
        super.setUp()
        setupWebApp()
        setupApp()
    }
    
    private func setupWebApp() {
        eventLoop = try! SelectorEventLoop(selector: try! KqueueSelector())
        router = Router()
        server = DefaultHTTPServer(eventLoop: eventLoop, port: port, app: router.app)
        
        try! server.start()
        
        eventCondition = NSCondition()
        eventLoopThread = Thread(target: self, selector: #selector(UITestBase.runEventLoop), object: nil)
        eventLoopThread.start()
    }
    
    private func setupApp() {
        app = XCUIApplication()
        app.launchEnvironment["webserviceURL"] = "http://[::1]:8088"
    }
    
    override func tearDown() {
        super.tearDown()
        app.terminate()
        server.stopAndWait()
        eventLoop.stop()
    }
    
    @objc func runEventLoop() {
        eventLoop.runForever()
        eventCondition.lock()
        eventCondition.signal()
        eventCondition.unlock()
    }
    
}

```

No m√©todo `setupWebApp()` eu inicializo o server e crio o `router`. O `router` √© o objeto que ser√° usado para definir as respostas do servidor para cada request.

No `setupApp()` eu crio o `XCUIApplication` e passo a url para o app. No c√≥digo do app, a √∫nica mudan√ßa que eu preciso alterar √© uma verifica√ß√£o se essa url foi passada, se tiver sido, ela se torna a _base url_ da API.

```swift
let baseURL = ProcessInfo.processInfo.environment["webserviceURL"] ?? "http://realurlgoeshere.com"
```  

Ok! Servidor configurado! Vamos ver os testes em a√ß√£o.

## Projeto de exemplo

O app de exemplo √© bem simples. √â uma micro-rede social para desenvolvedores iOS, onde voc√™ pode se cadastrar e publicar uma √∫nica frase ou cita√ß√£o que diz algo sobre voc√™. Al√©m disso voc√™ pode ver os usu√°rios cadastrados e as frases que eles publicaram. Ele apresenta uma lista de Devs e ao selecionar um deles, o usu√°rio vai pra uma tela de detalhe que mostra a frase publicada.

<img src="{{ site.baseurl }}/img/emannuelOC/list_devs.png">

A primeira tela √© uma tableView em que cada c√©lula mostra no `textLabel` o nome do dev naquela posi√ß√£o.

A segunda tela cont√©m somente uma label com a frase referente ao dev selecionado e o seu nome no title da `navigationBar`.

## Testando a UI

No nosso teste, quando o app abrir vai ser feita uma chamada para o servidor que deve retornar a lista de desenvolvedores cadastrados. Para definir os dados que ser√£o retornados, basta retornar um dicion√°rio ou array contendo as informa√ß√µes no bloco da JSONResponse().

```swift
let mockData = [
    [
        "id": 123,
        "name": "Emannuel Carvalho",
        "quote": "O equinociOS est√° demais! üöÄ"
    ],
    [
        "id": 214,
        "name": "Francesco Perrotti-Garcia",
        "quote": "Vc n√£o quer um pato üê•"
    ],
    [
        "id": 235,
        "name": "Kaique D'amato",
        "quote": "Computa√ß√£o molecular n√£o √© complicado!!!"
    ],
    [
        "id": 236,
        "name": "Fernando Bunn",
        "quote": "Parei de ler o artigo quando vi \"Cocoapods\"."
    ],
    [
        "id": 237,
        "name": "Rafael Feroli",
        "quote": "O que eu to fazendo aqui?! Eu sou designer!"
    ],
    [
        "id": 238,
        "name": "Steph Curry",
        "quote": "üèÄ Lock in #DubNation"
    ],
    [
        "id": 241,
        "name": "Ezequiel Fran√ßa",
        "quote": "N√£o √© stalking, √© uma esp√©cie de pesquisa sociol√≥gica dos devs do s√©c. XXI"
    ],
    [
        "id": 242,
        "name": "Guilherme Rambo",
        "quote": "Curti! Vou fazer uma vers√£o pro macOS... [3 minutes later] Pronto ‚úÖ"
    ],
    [
        "id": 243,
        "name": "Douglas Fischer",
        "quote": "To pagando pra ver o que v√£o escrever de mim. Pelo menos n√£o tem mention no blog! üòÖ"
    ]
]
```

Podemos ent√£o escrever o nosso c√≥digo com base nas informa√ß√µes que n√≥s sabemos que vir√£o do servidor. Segundo o retorno definido, a tableView deve mostrar uma lista com os nomes.

```swift 
func testShowingItems() {
        
    router["/developers"] = DelayResponse(JSONResponse(handler: { [unowned self] _ -> Any in
        return self.mockData
    }), delay: .delay(seconds: 0.0))
    
    app.launch()

    
    XCTAssert(app.tables.cells.children(matching: .staticText)["Emannuel Carvalho"].exists)
    XCTAssert(app.tables.cells.children(matching: .staticText)["Francesco Perrotti-Garcia"].exists)
    XCTAssert(app.tables.cells.children(matching: .staticText)["Kaique D'amato"].exists)
    XCTAssert(app.tables.cells.children(matching: .staticText)["Fernando Bunn"].exists)
    XCTAssert(app.tables.cells.children(matching: .staticText)["Rafael Feroli"].exists)
    XCTAssert(app.tables.cells.children(matching: .staticText)["Steph Curry"].exists)
    
    app.tables.element.swipeUp()
    
    XCTAssert(app.tables.cells.children(matching: .staticText)["Ezequiel Fran√ßa"].exists)
    XCTAssert(app.tables.cells.children(matching: .staticText)["Guilherme Rambo"].exists)
    XCTAssert(app.tables.cells.children(matching: .staticText)["Douglas Fischer"].exists)
    

}
```

Se tudo ocorrer como deveria, a tableView deve conter uma c√©lula com o nome de cada uma das pessoas listadas. O `swipeUp()` √© para garantir que mesmo num device com a tela menor, todos os itens poder√£o ser exibidos.

No nosso exemplo, ao selecionar um nome da lista o app vai pra uma nova tela com os detalhes da pessoa selecionada. Pra isso, √© feita uma chamada para a nossa API, passando o `id` da pessoa selecionada. Assim, √© poss√≠vel testar se ao selecionar uma pessoa da lista o app est√° realmente fazendo a chamada correta.

No pr√≥prio bloco onde √© definida a resposta pra um dado caminho √© poss√≠vel testar se as informa√ß√µes passadas est√£o corretas.

```swift
func testSelectingDeveloper() {
        
    router["/developers"] = DelayResponse(JSONResponse() { [unowned self] _ -> Any in
        return self.mockData
    }, delay: .delay(seconds: 0.2))
    
    router["/developer/details"] = JSONResponse() { [unowned self] environ -> Any in
        
        if let input = environ["swsgi.input"] as? SWSGIInput {
            JSONReader.read(input, handler: { (json) in
                if let info = json as? [String: Any] {
                    XCTAssert(info["developer_id"] as? Int == 214)
                }
            })
        }
        
        return self.userDetailsData
    }
    
    app.launch()
    
    XCUIApplication().tables.staticTexts["Francesco Perrotti-Garcia"].tap()
    
    XCTAssert(app.staticTexts["Francesco Perrotti-Garcia"].exists)
    XCTAssert(app.staticTexts["Vc n√£o quer um pato üê•"].exists)
    
}
```

Al√©m de garantir que as os par√¢metros certos est√£o sendo enviados, o teste tamb√©m verifica se o app est√° mostrando a frase correta - afinal de contas, esse √© um teste de UI. 

Aqui certamente cabe uma discuss√£o sobre se isso deve acontecer em um teste de _UI_. Eu vou deixar a discuss√£o mais profunda pra quem √© mais "gente grande". Nesse post fica s√≥ a apresenta√ß√£o da funcionalidade - que no meu caso foi bastante √∫til!

## Concluindo

O `Embassy` e o `Ambassador` me ajudaram bastante com os testes de UI no √∫ltimo projeto em que eu trabalhei e eu espero que possa ser √∫til pra alguns de voc√™s tamb√©m. Vale lembrar que s√£o ferramentas abertas! N√≥s podemos clonar os projetos, contribuir, propor e implementar novas funcionalidades.

Agrade√ßo a leitura!

Quaisquer cr√≠ticas e/ou sugest√µes s√£o mais que bem-vindas. Voc√™ pode encontrar no [Twitter](https://twitter.com/emannuel_oc){:target="_blank"} e no [Slack do iOSDevBR](http://iosdevbr.herokuapp.com){:target="_blank"}.
 
Grande abra√ßo! üôÉ



