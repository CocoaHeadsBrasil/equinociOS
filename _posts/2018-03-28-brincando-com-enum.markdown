---
layout:     post
title:      "Brincando com Enum"
subtitle:   "Usando valor associado e RawValue"
date:       2018-03-28 12:00:00
author:     "Eduardo Tolmasquim"
header-img: "img/eduardoTolmasquim/list.jpg"
category:   Categoria
---
>Ol√° pessoal, como √© a primeira vez que publico no EquinociOS, vou me apresentar. Sou o Eduardo Tolmasquim e entrei no mundo iOS pelo curso BEPiD em 2015 na PUC-rio (que hoje em dia se chama Apple Developer Academy). Atualmente sou dev iOS na Fulllab e nos tempos livres mantenho um blog chamado [doidiOS](https://www.doidios.com). A maior revolu√ß√£o na minha vida foi quando aprendi a ler no √¥nibus sem ficar enjoado. As vezes at√© tor√ßo para ter tr√¢nsito ü§£. Ok, n√£o chega a tanto... Mas o podcast √© hors concours na hora de lavar a lou√ßa.

####Agora vamos brincar com enum?

Os `enum`s s√£o perfeitos para modelar dados onde coisas s√£o (como diz o nome), enumer√°veis.

Por exemplo neste caso onde tenho dois tipos de roupas:

~~~
enum Clothes {
    case hat
    case shoe
}
~~~
Agora podemos usar os valores

~~~
let myBeautifulHat = Clothes.hat
print(myBeautifulHat)
// hat
~~~

Tudo est√° √≥timo, at√© que voc√™ percebe que n√£o adianta nada ter um sapato quando n√£o se sabe o tamanho dele.

Ent√£o voc√™ pensa: Sem problemas! Vou criar uma vari√°vel opcional para guardar o tamanho.

~~~
enum Clothes {
    case hat
    case shoe
}
var shoeSize: Int?
~~~

Por√©m, quando voc√™ vai usar o `enum`, aparece o desconforto

~~~
let myBeautifulShoe = Clothes.shoe
shoeSize = 45 // Sim, em cal√ßo 45 üëû

if let size = shoeSize {
    print(myBeautifulShoe, size)
}
//shoe 45
~~~

N√£o sei se voc√™ est√° sentindo, mas o _code smell_ est√° muito forte ü§¢

1. Sempre que formos usar o sapato temos que fazer `unwrap` da vari√°vel _shoeSize_? Boring! üôÑ
2. Se criarmos um sapato mas esquecermos de criar um valor, teremos um sapato sem tamanho, o que n√£o faz sentido.


###A solu√ß√£o √© simples: Enum com valor associado! üéâ

Fazendo...

~~~
enum Clothes {
    case hat
    case shoe(size: Int)
}
~~~

Podemos usar

~~~
let hat = Clothes.hat
let shoe = Clothes.shoe(size: 45)

print(shoe)
//shoe(40)
~~~

Se n√£o soubermos o tamanho do sapato, podemos at√© usar a fun√ß√£o que o `enum` nos d√° gratuitamente, para usar depois

~~~
let makeShoe = Clothes.shoe
let ShoeSize45 = makeShoe(45)
~~~


###Enum com RawValue

 
Agora vamos ver outra funcionalidade legal do `enum`.

Muitas vezes `enum`s s√£o relacionados a outro tipo de valor (o `rawValue`), geralmente para inicializar com valores vindos de outros sistemas.

Podemos usar qualquer tipo que seja `RawRepresentable`. Por exemplo `Int` ou `Strings`. (`Double` n√£o!)

~~~
enum Drink: String {
    case water
    case soda
}
~~~

O uso

~~~
let myDeliciousDrink = Drink(rawValue: "water")

let sodaName = Drink.soda.rawValue
~~~

Assim ganhamos de gra√ßa um `init` e ainda podemos acessar o valor `String` correspondente aos valores do `enum`.

Mas aten√ß√£o, este init pode falhar!

~~~
let coldDrink = Drink(rawValue: "mineirinho")
~~~

Infelizmente n√£o temos mineirinho no enum, ent√£o a vari√°vel _coldDrink_ ser√° nula

~~~
print(coldDrink ?? "nil")
//nil
~~~

Agora podemos juntar tudo que aprendemos e fazer um super `enum` com `rawValue` e valor associado!

~~~
enum Clothes: String {
    case hat
    case shoe(size: Int)
}
~~~

Mas a√≠, erro de compila√ß√£o...

![]({{ site.baseurl }}/img/eduardoTolmasquim/compilationError.png)

Pois √©... `enum` com `rawValue` n√£o pode ter valor associado üòµ

Bom, faz sentido. O `enum` n√£o tem como saber se `Clothes.shoe(size: 45).rawValue`  deveria ser _"shoe45"_, _"shoe-45"_, somente _"shoe"_, `nil` ou qualquer outra coisa.

### Mas nada est√° perdido. N√≥s podemos implementar um enum com rawValue e valor associado üí™

Veja este exemplo

~~~
// Primeiro criamos um enum 
// como se s√≥ tivesse valor associado

enum Clothes {
    case hat
    case shoe(Int)
    
    // Criamos um outro enum aqui dentro, 
    // agora sim com rawValue.
    
    private enum ValueFromString: String {
        case hat
        case shoe
    }
    
    // Este √© o init falh√°vel, onde a gente diz 
    // como que a String vira enum. 
    // Neste caso queremos que s√≥ "hat" possa ser
    // inicializada com String.
    
    init?(rawValue someString: String) {
        guard let type = ValueFromString(rawValue: someString) else {
            return nil
        }
        switch type {
        case .hat: self = .hat
        case .shoe: return nil
        }
    }
    
    // Criamos uma vari√°vel RawValue que vai converter
    // o enum para String. 
    // Neste caso queremos que shoe seja traduzido 
    // para somente "shoe", independente do n√∫mero.
    
    var rawValue: String {
        switch self {
        case .hat:
            return ValueFromString.hat.rawValue
        case .shoe:
            return ValueFromString.shoe.rawValue
        }
    }
}
~~~

Como usar:

~~~
let myOtherHat = Clothes.init(rawValue: "hat")

let shoeName = Clothes.shoe(45).rawValue
~~~


###Discutindo essa abordagem


####Coment√°rios

* Neste caso optamos por n√£o inicializar _shoe_ com `String`, mas poder√≠amos dar um valor padr√£o se quis√©ssemos.
* Optamos por retornar somente _"shoe"_ no `rawValue`, mas tamb√©m poder√≠amos retornar algo como _"shoe-45"_

####O lado trabalhoso ‚õè

Sempre que a gente quiser adicionar um caso no `enum`, teremos que adicionar em quatro lugares

1. o `enum` _Clothes_
2. o `enum` _ValueForString_
3. mais um caso no `switch` do `init`
4. mais um caso no `switch` do `rawValue`

####Mas pelo menos √© seguro üîí

Apesar de termos que adicionar os novos casos em quatro lugares, n√£o corremos o risco de esquecer um lugar, pois isso geraria erro de compila√ß√£o. Isso se deve ao fato de que o `switch` √© obrigado a lidar com todos os casos.

Vale ressaltar que se algu√©m colocar um caso `default` no `switch`, ele se torna vulner√°vel novamente. 

---

O `enum` √© uma ferramenta muito √∫til e poderosa do Swift, que permite escrevermos c√≥digos mais organizados e leg√≠veis. O que voc√™ achou desta abordagem? Conte nos coment√°rios!

---
Cr√©dito da imagem:

<a href='https://www.freepik.com/free-vector/flat-check-list-design_953317.htm'>Designed by Freepik</a>
